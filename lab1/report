Lab1 report
[练习1]

[练习1.1] 操作系统镜像文件 ucore.img 是如何一步一步生成的?(需要比较详细地解释 Makefile 中
每一条相关命令和命令参数的含义,以及说明命令导致的结果)

编译过程为：
ucore.img需要bootblock, kernel 两个二进制文件。
bootblock需要bootasm.o, bootmain.o 和sign工具。
kernel需要init.o readline.o stdio.o kdebug.o kmonitor.o panic.o clock.o console.o intr.o 
	 picirq.o trap.o trapentry.o vectors.o pmm.o  printfmt.o string.o
	 及kernel.ld
.o文件均由相应的.c或.S文件编译生成。

具体命令分析：
bootloader的.o文件生成：
	生成bootasm.o
	gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc 
	    -c boot/bootasm.S -o obj/boot/bootasm.o
	其中关键的参数为
		-ggdb  生成可供gdb使用的调试信息
		-m32  生成适用于32位环境的代码
		-gstabs  生成stabs格式的调试信息
		-nostdinc  不使用标准库
		-fno-stack-protector  不生成用于检测缓冲区溢出的代码
		-Os  为减小代码大小而进行优化
		-I<dir>  添加搜索头文件的路径

	生成bootmain.o
	gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc \
	    -fno-stack-protector -Ilibs/ -Os -nostdinc \
 	    -c boot/bootmain.c -o obj/boot/bootmain.o
	新出现的关键参数有
		-fno-builtin  除非用__builtin_前缀,否则不进行builtin函数的优化

kernel的.o文件生成：
	以init.o为例：
	gcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 \
		-gstabs -nostdinc  -fno-stack-protector \
		-Ilibs/ -Ikern/debug/ -Ikern/driver/ \
		-Ikern/trap/ -Ikern/mm/ -c kern/init/init.c \
		-o obj/kern/init/init.o

bootblock的生成：
	生成sign工具：
	gcc -Itools/ -g -Wall -O2 -c tools/sign.c \
 		-o obj/sign/tools/sign.o
	gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign

	生成bootblock.o
	ld -m    elf_i386 -nostdlib -N -e start -Ttext 0x7C00 \
		obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o
 	其中关键的参数为
		-m <emulation>  模拟为i386上的连接器
		-nostdlib  不使用标准库
		-N  设置代码段和数据段均可读写
		-e <entry>  指定入口
		-Ttext  制定代码段开始位置（作为基址,影响合并.o中的直接跳转指令）

	拷贝二进制代码bootblock.o到bootblock.out
	objcopy -S -O binary obj/bootblock.o obj/bootblock.out
	其中关键的参数为
		-S  移除所有符号和重定位信息
		-O <bfdname>  指定输出格式

 	使用sign工具处理bootblock.out，使其符合主引导区的规范，生成bootblock
 	bin/sign obj/bootblock.out bin/bootblock

kernel的生成:
ld -m    elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel \
	obj/kern/init/init.o obj/kern/libs/readline.o \
 	obj/kern/libs/stdio.o obj/kern/debug/kdebug.o \
	obj/kern/debug/kmonitor.o obj/kern/debug/panic.o \
 	obj/kern/driver/clock.o obj/kern/driver/console.o \
	obj/kern/driver/intr.o obj/kern/driver/picirq.o \
 	obj/kern/trap/trap.o obj/kern/trap/trapentry.o \
	obj/kern/trap/vectors.o obj/kern/mm/pmm.o \
	obj/libs/printfmt.o obj/libs/string.o
其中新出现的关键参数为
	-T <scriptfile>  让连接器使用指定的脚本，这里使用kernel.ld这个链接规则。

ucore.img的生成：
生成一个有10000个块的文件，每个块默认512字节，用0填充
dd if=/dev/zero of=bin/ucore.img count=10000

把bootblock中的内容写到第一个块
dd if=bin/bootblock of=bin/ucore.img conv=notrunc

从第二个块开始写kernel中的内容
dd if=bin/kernel of=bin/ucore.img seek=1 conv=notrunc

[练习1.2] 一个被系统认为是符合规范的硬盘主引导扇区的特征是什么?

从sign.c的代码来看，一个磁盘主引导扇区只有512字节。且
第510个（倒数第二个）字节是0x55，
第511个（倒数第一个）字节是0xAA。

[练习2]

[练习2.1] 从 CPU 加电后执行的第一条指令开始,单步跟踪 BIOS 的执行。
[练习2.2] 在初始化位置0x7c00 设置实地址断点,测试断点正常。

执行make lab1-mon 命令。
该指令使用了tool/labinit文件，在0x7c00处设置了断点。
之后使用si、ni跟踪。

gdt描述符在0x7c6c
gdt表位置在0x7c54
其中index 0x0 为null 0x8 为data为code段 0x10 为data段。base均为0x0
bootmain函数的栈从0xbcfc开始往低地址扩张。

[练习2.3] 在调用qemu 时增加-d in_asm -D q.log 参数，便可以将运行的汇编指令保存在q.log 中。
将执行的汇编代码与bootasm.S 和 bootblock.asm 进行比较，看看二者是否一致。
bootasm.S和bootblock.asm中的代码是相同。

[练习3] 分析bootloader 进入保护模式的过程。

从%cs=0 $pc=0x7c00，进入后

首先清理环境：包括将flag置0和将段寄存器置0
	.code16
	    cli
	    cld
	    xorw %ax, %ax
	    movw %ax, %ds
	    movw %ax, %es
	    movw %ax, %ss

开启A20：通过将键盘控制器上的A20线置于高电位，全部32条地址线可用，
可以访问4G的内存空间。
	seta20.1:               # 等待8042键盘控制器不忙
	    inb $0x64, %al      # 
	    testb $0x2, %al     #
	    jnz seta20.1        #
	
	    movb $0xd1, %al     # 发送写8042输出端口的指令
	    outb %al, $0x64     #
	
	seta20.1:               # 等待8042键盘控制器不忙
	    inb $0x64, %al      # 
	    testb $0x2, %al     #
	    jnz seta20.1        #
	
	    movb $0xdf, %al     # 打开A20
	    outb %al, $0x60     # 

初始化GDT表：一个简单的GDT表和其描述符已经静态储存在引导区中，载入即可
	    lgdt gdtdesc

进入保护模式：通过将cr0寄存器PE位置1便开启了保护模式
	    movl %cr0, %eax
	    orl $CR0_PE_ON, %eax
	    movl %eax, %cr0

通过长跳转更新cs的基地址
	    ljmp $PROT_MODE_CSEG, $protcseg
	.code32
	protcseg:

设置段寄存器，并建立堆栈
	    movw $PROT_MODE_DSEG, %ax
	    movw %ax, %ds
	    movw %ax, %es
	    movw %ax, %fs
	    movw %ax, %gs
	    movw %ax, %ss
	    movl $0x0, %ebp
	    movl $start, %esp

转到保护模式完成，进入boot主方法
	    call bootmain



[练习4] ：分析bootloader加载ELF格式的OS的过程。

首先看readsect函数，
readsect从设备的第secno扇区读取数据到dst位置
	static void
	readsect(void *dst, uint32_t secno) {
	    waitdisk();
	
	    outb(0x1F2, 1);                         // 设置读取扇区的数目为1
	    outb(0x1F3, secno & 0xFF);
	    outb(0x1F4, (secno >> 8) & 0xFF);
	    outb(0x1F5, (secno >> 16) & 0xFF);
	    outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0);
	        // 上面四条指令联合制定了扇区号
	        // 在这4个字节线联合构成的32位参数中
	        //   29-31位强制设为1
	        //   28位(=0)表示访问"Disk 0"
	        //   0-27位是28位的偏移量
	    outb(0x1F7, 0x20);                      // 0x20命令，读取扇区
	
	    waitdisk();

	    insl(0x1F0, dst, SECTSIZE / 4);         // 读取到dst位置，
	                                            // 幻数4因为这里以DW为单位(32位为一个单位）
	}

readseg简单包装了readsect，可以从设备读取任意长度的内容。
	static void
	readseg(uintptr_t va, uint32_t count, uint32_t offset) {
	    uintptr_t end_va = va + count;
	
	    va -= offset % SECTSIZE;		//change va? write to the correct position?
	
	    uint32_t secno = (offset / SECTSIZE) + 1; 
	    // 加1因为0扇区被引导占用
	    // ELF文件从1扇区开始
	
	    for (; va < end_va; va += SECTSIZE, secno ++) {
	        readsect((void *)va, secno);
	    }
	}


在bootmain函数中，
	void
	bootmain(void) {
	    // 首先读取ELF的头部
	    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
	
	    // 通过储存在头部的幻数判断是否是合法的ELF文件
	    if (ELFHDR->e_magic != ELF_MAGIC) {
	        goto bad;
	    }
	
	    struct proghdr *ph, *eph;
	
	    // ELF头部有描述ELF文件应加载到内存什么位置的描述表，
	    // 先将描述表的头地址存在ph
	    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
	    eph = ph + ELFHDR->e_phnum;
	
	    // 按照描述表将ELF文件中数据载入内存
	    for (; ph < eph; ph ++) {
	        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
	    }
	    // ELF文件0x1000位置后面的0xd1ec比特被载入内存0x00100000
	    // ELF文件0xf000位置后面的0x1d20比特被载入内存0x0010e000

	    // 根据ELF头部储存的入口信息，找到内核的入口
	    ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();
	
	bad:
	    outw(0x8A00, 0x8A00);
	    outw(0x8A00, 0x8E00);
	    while (1);
	}

[练习5] 实现函数调用堆栈跟踪函数 
ss:ebp指向的堆栈位置储存着caller的ebp，以此为线索可以得到所有使用堆栈的函数ebp。
ss:ebp+4指向caller调用时的eip，ss:ebp+8等是（可能的）参数。


[练习6] 完善中断初始化和处理

[练习6.1] 中断向量表中一个表项占多少字节？其中哪几位代表中断处理代码的入口？
中断向量表一个表项占用8字节，其中2-3字节是段选择子，0-1字节和6-7字节拼成位移，
两者联合便是中断处理程序的入口地址。

[练习6.2] 请编程完善kern/trap/trap.c中对中断向量表进行初始化的函数idt_init。

[练习6.3] 请编程完善trap.c中的中断处理函数trap，在对时钟中断进行处理的部分填写trap函数


[练习7]  增加syscall功能，即增加一用户态函数（可执行一特定系统调用：获得时钟计数值），
当内核初始完毕后，可从内核态返回到用户态的函数，而用户态的函数又通过系统调用得到内核态的服务

ucore中断机制探索：
中断发生后硬件完成两件事：
	1 保存一部分当前的context
	2 获取cs,eip和ss,esp的值。
保存的信息：
high:	custom data
		error(error code, trapno)	这些由ucore保存
		PC data(cs, eip, eflags)
low:	Stack data(ss, esp)			这些由硬件保存，stack data只有在用户态发生中断是才保存
PC，stack register值的获取：
cs, eip: 均从中断表中获取
ss, esp:
	用户态中断：从TSS中获取（转到内核栈）
	内核态中断：不变（即直接沿用当前的内核栈）

中断发生和中断返回是辨识用户态还是内核态
中断发生：从当前的CS，SS段寄存器中可以知道中断从哪个态发生的。
中断返回：从保存的信息中的cs中可以知道要返回到哪个态（返回用户态要多pop stack data）

**USER_CS/KERNEL_CS/USER_DS/KERNEL_DS 均为0.只是形式上区分，实际上用了一个地址空间。
lab1_kernel_to_user():
伪装成用户态发生的中断：
此时在内核态，当前esp为7b50(比方说），先-8假装有stack data，再push之后的数据。进入中断后esp没变。
中断处理时，修改保存的context: cs设为USER_CS（让iret以为要返回到用户态），ss设为USER_DS, esp设为7b48(其实随便设的，因为没有真正的用户程序，保证安全即可。)

lab1_kernel_to_user():
伪装成内核态的中断:
此时在用户态，push数据。进入中断后esp变为TSS中的值（10fda0）。
中断处理时，同样修改cs。还要将context信息搬到7b50之后的地方，这样iret返回后esp就会在7b50。



******************问题********************
memlayout.h:
#define KERNEL_CS    ((GD_KTEXT) | DPL_KERNEL
#define KERNEL_DS    ((GD_KDATA) | DPL_KERNEL)
#define USER_CS        ((GD_UTEXT) | DPL_USER)
#define USER_DS        ((GD_UDATA) | DPL_USER)
why or a DPL?
	CS register contains cs index and privilege.

pmm.c:
function lgdt:
	asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
	reload cs to what?

