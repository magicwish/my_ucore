Lab5 Report

Some Note:
用户进程的建立和退出
用户进程创建和执行：
实际上是由user_main这个内核线程最终调用do_execute将自身变为该用户进程来完成的。
过程：user_main=>kernel_execute(产生中断)=>sys_call=>sys_execute=>do_execute=>load_icode
load_icode做了：新建mm,页表；分配内存区域，填入用户程序的代码/数据/堆栈;填写mm,页表的相应内容;修改当前进程控制块的mm,cr3
			   修改当前控制块的tf（tf指向当前产生中断是硬件push的tf).
然后do_execute修改控制块的name，至此用户进程的控制块和在内存中的内容都设置好了。
但中断返回时，因为修改过了tf（esp,eip相应位置，其他寄存器清零），返回后即开始运行用户进程。
用户进程退出：
与内核线程一样最终会调用do_exit完成退出，但过程稍有不同。
每个内核线程都被kernel_thread_entry包住了。kernel_thread_entry在call完内核线程后会调用do_exit。
用户程序则是在编译后会在末尾附上sys_exit的调用。

进程控制块中的tf
在创建kernel thread时，指向伪装的tf.
在用user_main创建完用户进程后，这个伪装的tf就没用了。
tf始终对应当前中断所push的tf(内核程序在就可以直接用proc->tf了).

switch的时机：
对于因进入等待队列而要切换的进程，在更新完该进程的状态后*主动*调用schedule,但被唤醒后，切回来继续做后面的事.
对于因为时间片用完而要切换的进程，在每次中断处理结束后判断并*被动*调用schedule(见trap函数）

do_wait解析：
先找孩子：若为指定pid,则只找指定pid的孩子。若为随意，则所有孩子都算。
若没找到：返回-E_BAD_PROC
若找到，且无Zombie,父进程进入wait状态（停在do_wait中）
若找到，且有Zombie,则释放zombie子进程的PCB和kstack,返回pid(从do_wait中跳出）

子进程列表：
儿子有older child和younger child。每次新加入的儿子为最年轻的，父亲指向的第一个儿子是最年轻的，遍历链表，儿子年龄依次增加。

进程退出清理工作的分配：
子进程：除PCB和kstack 父进程：子进程的PCB和kstack
进程完成自己的清理任务后：
	1 唤醒父进程（若有）:这样父进程可以被调度，然后处理该子进程的清理（如果不是父进程等的那个，父进程会再次sleep）
	2 将自己的子进程，无论死活，丟给initproc（当然如果其中有zombie，唤醒initproc）
之后自己变为zombie。
initproc有条语句 while (do_wait(0, NULL) == 0) {schedule();}
这样只要initproc有活着的孩子就会进入等待，一发现有zombie，就会处理该zombie并从do_wait中跳出，schedule一下。
最终没有孩子后才继续运行下去（即没有用户进程了）。

[练习1]加载应用程序并执行
具体流程分析见Some Note的用户进程创建和执行部分。
其中load_icode重设了tf，eip为用户进程的第一条指令，esp为用户栈的栈顶，其他寄存器全部清零。

[练习2]父进程复制自己的内存空间给子进程
其中的copy_range函数：
一页一页地处理。
1 获取from的pte,若为空跳过。
2 获取to对应地址的pte,若为空创建pte
3 获取from该地址的page，分配给to对应地址一页npage
4 拷贝page中的内容
5 设置to的pte,与npage建立映射关系。

[练习3]理解进程执行fork/exec/wait/exit的实现，以及系统调用的实现。

